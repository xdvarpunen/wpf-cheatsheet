{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"commandlineargument/","text":"Command-line parameter Command-line parameters are accessible through Application Startup event. Second parameter StartupEventArgs contains list of passed parameters. Example taken from the Microsoft documentation. <Application xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" x:Class=\"SDKSample.App\" Startup=\"App_Startup\" /> using System.Windows; namespace SDKSample { public partial class App : Application { void App_Startup(object sender, StartupEventArgs e) { // Application is running // Process command line args bool startMinimized = false; for (int i = 0; i != e.Args.Length; ++i) { if (e.Args[i] == \"/StartMinimized\") { startMinimized = true; } } // Create main application window, starting minimized if specified MainWindow mainWindow = new MainWindow(); if (startMinimized) { mainWindow.WindowState = WindowState.Minimized; } mainWindow.Show(); } } } Startup documentation WPF Tutorial","title":"Command-line parameter"},{"location":"commandlineargument/#command-line-parameter","text":"Command-line parameters are accessible through Application Startup event. Second parameter StartupEventArgs contains list of passed parameters. Example taken from the Microsoft documentation. <Application xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" x:Class=\"SDKSample.App\" Startup=\"App_Startup\" /> using System.Windows; namespace SDKSample { public partial class App : Application { void App_Startup(object sender, StartupEventArgs e) { // Application is running // Process command line args bool startMinimized = false; for (int i = 0; i != e.Args.Length; ++i) { if (e.Args[i] == \"/StartMinimized\") { startMinimized = true; } } // Create main application window, starting minimized if specified MainWindow mainWindow = new MainWindow(); if (startMinimized) { mainWindow.WindowState = WindowState.Minimized; } mainWindow.Show(); } } } Startup documentation WPF Tutorial","title":"Command-line parameter"},{"location":"forloopxaml/","text":"XAML and For-loop Coming from browser JavaScript based apps you would expect XAML have for loop. There is none. Use ItemsControl, DataGrid and other equivalent controls as substitute. Stackoverflow - Something Like For Loop in XAML ItemsControl Class DataGrid Class","title":"XAML and For-loop"},{"location":"forloopxaml/#xaml-and-for-loop","text":"Coming from browser JavaScript based apps you would expect XAML have for loop. There is none. Use ItemsControl, DataGrid and other equivalent controls as substitute. Stackoverflow - Something Like For Loop in XAML ItemsControl Class DataGrid Class","title":"XAML and For-loop"},{"location":"icon/","text":"Windows Icons Windows icons were in Visual Studio Programs folder for Visual Studio 2005, 2008 and 2010. After that they were downloadable as separate zip file. Later WinUI provides the latest Windows icons. The Visual Studio Image Library For Visual Studio 2012, 2013, 2015, 2017, and 2019: The icons are not in the program folder any more. The Visual Studio 2010 Image Library contains application images that appear in Microsoft Windows, the Office system, Microsoft Visual Studio, and other Microsoft software. You can use this set of over 1,000 images to create applications that look visually consistent with Microsoft software. The Visual Studio 2010 Image Library Visual Studio Image Library Download Stackoverflow - Can I use the system's default save/new/etc file icons in WPF? Stackoverflow - Does .NET have icon collections? WinUI WinUI provides Windows icons. Segoe MDL2 Assets icons Segoe Fluent Icons font Other Options Create yourself Use NuGets available","title":"Windows Icons"},{"location":"icon/#windows-icons","text":"Windows icons were in Visual Studio Programs folder for Visual Studio 2005, 2008 and 2010. After that they were downloadable as separate zip file. Later WinUI provides the latest Windows icons.","title":"Windows Icons"},{"location":"icon/#the-visual-studio-image-library","text":"For Visual Studio 2012, 2013, 2015, 2017, and 2019: The icons are not in the program folder any more. The Visual Studio 2010 Image Library contains application images that appear in Microsoft Windows, the Office system, Microsoft Visual Studio, and other Microsoft software. You can use this set of over 1,000 images to create applications that look visually consistent with Microsoft software. The Visual Studio 2010 Image Library Visual Studio Image Library Download Stackoverflow - Can I use the system's default save/new/etc file icons in WPF? Stackoverflow - Does .NET have icon collections?","title":"The Visual Studio Image Library"},{"location":"icon/#winui","text":"WinUI provides Windows icons. Segoe MDL2 Assets icons Segoe Fluent Icons font","title":"WinUI"},{"location":"icon/#other-options","text":"Create yourself Use NuGets available","title":"Other Options"},{"location":"mvvmlibraries/","text":"MVVM Libraries Comparing different MVVM libraries to expose the feature/solution and enable making a choice. Caliburn Vimeo, Caliburn Micro Introduction Frameworks & Libraries Links Caliburn.Micro Github Homepage Stylet Github ReactiveUI Github Catel Catel Sails Github Prism Github Homepage MVVM Light Github MVVM Toolkit Github Homepage Elmish.WPF Github DevExpress Homepage Features Is Platform Caliburn.Micro: No Stylet: No ReactiveUI: No Catel: No Sails: No Prism: No MVVM Light: No MVVM Toolkit: No Elmish.WPF: No DevExpress: No Is traditional Caliburn.Micro: Yes Stylet: Yes ReactiveUI: No (Reactive bindings) Catel: No (context-aware view and view-model creation) Sails: Yes Prism: Yes MVVM Light: Yes MVVM Toolkit: Yes Elmish.WPF: No (MVU) DevExpress: Yes Status Archived Caliburn.Micro: No Stylet: No ReactiveUI: No Catel: No Sails: No Prism: No MVVM Light: Yes(Succeeded by MVVM Toolkit) MVVM Toolkit: No Elmish.WPF: No DevExpress: No Is part of the .NET Foundation Caliburn.Micro: No Stylet: No ReactiveUI: Yes Catel: No Sails: No Prism: No MVVM Light: No MVVM Toolkit: Yes Elmish.WPF: No DevExpress: No Maintained by company Caliburn.Micro: No Stylet: No ReactiveUI: No Catel: WildGums Sails: No Prism: No MVVM Light: No MVVM Toolkit: Microsoft Elmish.WPF: No DevExpress: DevExpress Read More https://www.reddit.com/r/csharp/comments/6dn03f/what_wpf_mvvm_framework_should_i_stick_with/ https://github.com/m0j0/MvvmFrameworksComparison https://stackoverflow.com/questions/24756400/comparison-of-use-of-mvvm-between-wpf-application-and-winforms-application https://github.com/Carlos487/awesome-wpf#libraries https://github.com/jamesnet214/awesome-wpf https://github.com/quozd/awesome-dotnet#mvvm","title":"MVVM Libraries"},{"location":"mvvmlibraries/#mvvm-libraries","text":"Comparing different MVVM libraries to expose the feature/solution and enable making a choice.","title":"MVVM Libraries"},{"location":"mvvmlibraries/#caliburn","text":"Vimeo, Caliburn Micro Introduction","title":"Caliburn"},{"location":"mvvmlibraries/#frameworks-libraries-links","text":"Caliburn.Micro Github Homepage Stylet Github ReactiveUI Github Catel Catel Sails Github Prism Github Homepage MVVM Light Github MVVM Toolkit Github Homepage Elmish.WPF Github DevExpress Homepage","title":"Frameworks &amp; Libraries Links"},{"location":"mvvmlibraries/#features","text":"Is Platform Caliburn.Micro: No Stylet: No ReactiveUI: No Catel: No Sails: No Prism: No MVVM Light: No MVVM Toolkit: No Elmish.WPF: No DevExpress: No Is traditional Caliburn.Micro: Yes Stylet: Yes ReactiveUI: No (Reactive bindings) Catel: No (context-aware view and view-model creation) Sails: Yes Prism: Yes MVVM Light: Yes MVVM Toolkit: Yes Elmish.WPF: No (MVU) DevExpress: Yes","title":"Features"},{"location":"mvvmlibraries/#status","text":"Archived Caliburn.Micro: No Stylet: No ReactiveUI: No Catel: No Sails: No Prism: No MVVM Light: Yes(Succeeded by MVVM Toolkit) MVVM Toolkit: No Elmish.WPF: No DevExpress: No Is part of the .NET Foundation Caliburn.Micro: No Stylet: No ReactiveUI: Yes Catel: No Sails: No Prism: No MVVM Light: No MVVM Toolkit: Yes Elmish.WPF: No DevExpress: No Maintained by company Caliburn.Micro: No Stylet: No ReactiveUI: No Catel: WildGums Sails: No Prism: No MVVM Light: No MVVM Toolkit: Microsoft Elmish.WPF: No DevExpress: DevExpress","title":"Status"},{"location":"mvvmlibraries/#read-more","text":"https://www.reddit.com/r/csharp/comments/6dn03f/what_wpf_mvvm_framework_should_i_stick_with/ https://github.com/m0j0/MvvmFrameworksComparison https://stackoverflow.com/questions/24756400/comparison-of-use-of-mvvm-between-wpf-application-and-winforms-application https://github.com/Carlos487/awesome-wpf#libraries https://github.com/jamesnet214/awesome-wpf https://github.com/quozd/awesome-dotnet#mvvm","title":"Read More"},{"location":"support/","text":"Support UWP In maintenance mode Windows App SDK not supported WinUI Windows UI Library WinUI is a user interface layer that contains modern controls and styles for building Windows apps. As the native UI layer in Windows it embodies Fluent Design, giving each Windows app the polished feel that customers expect. WinUI 2 is a library of controls that provides official native Microsoft UI controls and features for Windows UWP apps. WinUI 2 can be used in any Windows 10 UWP XAML app, or in a Xamarin.Forms app running on Windows 10 using native view embedding. WinUI 3 is the next generation of the WinUI framework. It dramatically expands WinUI into a full UX framework, making WinUI available for all types of Windows apps \u2013 from Win32 to UWP \u2013 for use as the UI layer. Requires Windows 10 October 2018 Update (Version 1809, OS build 17763) Missing features from UWP currently at time of the writing Links .NET 6 - Supported OS versions End of life Get started with Windows: Selecting a development technology Homepage Github repository Windows UI Library (WinUI) Roadmap Reddit post WinUI 3 or WPF Missing features in WinUI Windows App SDK Discussion UWP Is Dead, Long Live The App SDK","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"support/#uwp","text":"In maintenance mode Windows App SDK not supported","title":"UWP"},{"location":"support/#winui","text":"Windows UI Library WinUI is a user interface layer that contains modern controls and styles for building Windows apps. As the native UI layer in Windows it embodies Fluent Design, giving each Windows app the polished feel that customers expect. WinUI 2 is a library of controls that provides official native Microsoft UI controls and features for Windows UWP apps. WinUI 2 can be used in any Windows 10 UWP XAML app, or in a Xamarin.Forms app running on Windows 10 using native view embedding. WinUI 3 is the next generation of the WinUI framework. It dramatically expands WinUI into a full UX framework, making WinUI available for all types of Windows apps \u2013 from Win32 to UWP \u2013 for use as the UI layer. Requires Windows 10 October 2018 Update (Version 1809, OS build 17763) Missing features from UWP currently at time of the writing","title":"WinUI"},{"location":"support/#links","text":".NET 6 - Supported OS versions End of life Get started with Windows: Selecting a development technology Homepage Github repository Windows UI Library (WinUI) Roadmap Reddit post WinUI 3 or WPF Missing features in WinUI Windows App SDK Discussion UWP Is Dead, Long Live The App SDK","title":"Links"}]}